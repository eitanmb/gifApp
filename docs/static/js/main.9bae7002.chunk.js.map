{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","catsExistentes","handleSubmit","type","value","onChange","target","handleValue","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","propType","PropTypes","string","isRequired","GifGrid","loading","estado","setEstado","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,uBAAMC,SAAW,SAAAC,GAAC,OAZD,SAACA,GAClBA,EAAEC,iBAEFC,QAAQC,IAAI,eAAgBN,GAEzBA,EAAWO,OAAOC,OAAS,IAC1BV,GAAgB,SAAAW,GAAc,OAAMT,GAAN,mBAAqBS,OACnDR,EAAc,KAKIS,CAAaP,IAAnC,UACI,4BAAKH,IACL,uBACIW,KAAK,OACLC,MAAQZ,EACRa,SAAY,SAACV,GAAD,OAxBJ,SAACA,GACjBF,EAAeE,EAAEW,OAAOF,OAGxBP,QAAQC,IAAI,cAAeN,GAoBAe,CAAYZ,U,+BC/BlCa,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACjC,MAAO,CACHF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QAVnB,kBAcZM,GAdY,4CAAH,sD,gBCEPM,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOT,EAAW,EAAXA,IAElC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,4BAAKA,QAKjBG,EAAYI,SAAW,CAEnBP,MAAOQ,IAAUC,OAAOC,WACxBnB,IAAKiB,IAAUC,OAAOC,YCXnB,IAAMC,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAGtB,ECJwB,SAAEA,GAE1B,MAA4BlB,mBACxB,CACIyB,KAAK,GACLgB,SAAS,IAHjB,mBAAOC,EAAP,KAAeC,EAAf,KAqBA,OAdAC,qBAAW,WAEP3B,EAASC,GACJ2B,MAAM,SAACC,GAEJH,EAAW,CACPlB,KAAMqB,EACNL,SAAS,SAIlB,CAACvB,IAGDwB,EDnB0BK,CAAc7B,GAAlCY,EAAb,EAAQL,KAAagB,EAArB,EAAqBA,QAGrB,OACI,qCACA,6BAAMvB,IAEJuB,GAAW,mBAAGR,UAAU,qDAAb,wBACb,qBAAKA,UAAU,YAAf,SAGQH,EAAOH,KAAK,SAAAqB,GAAG,OACX,cAAC,EAAD,eAEKA,GADAA,EAAIpB,aEYdqB,EA5BM,SAAC,GAAkC,IAAD,IAA9BC,yBAA8B,MAAV,GAAU,EAEnD,EAAoClD,mBAAUkD,GAA9C,mBAAOC,EAAP,KAAmBpD,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQoD,EAAWxB,KAAK,SAAAT,GAAQ,OAEhB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCXrCkC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9bae7002.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleValue = (e) => {\n        setInputValue( e.target.value );\n\n        //para fines de las pruebas\n        console.log('handleValue', inputValue);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        console.log('handleSubmit', inputValue);\n\n        if(inputValue.trim().length > 2 ) {\n            setCategories ( catsExistentes => [ inputValue, ...catsExistentes] );\n            setInputValue('');\n        }\n    }\n    \n    return (\n        <form onSubmit={ e => handleSubmit(e) }>\n            <p>{ inputValue }</p>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange= { (e) => handleValue(e) }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=gioUW6f3fRdjFkMrr8HCDDS4J5egsE3A`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( ({ id, title, images }) => {\n        return {\n            id,\n            title,\n            url: images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n\nGifGridItem.propType = {\n   \n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\nimport PropTypes from 'prop-types';\n\nexport const GifGrid = ( {category} ) => {\n\n    // const [images, setImages] = useState([]);\n    const { data:images, loading } = useFetchGifs( category );\n\n   \n    return (\n        <>\n        <h3>{ category }</h3>\n\n        { loading && <p className=\"animate__animated animate__flash animate__infinite\">Loading...</p>}\n        <div className=\"card-grid\">\n            \n            {\n                images.map( img  => \n                    <GifGridItem \n                    key={img.id}\n                    { ...img } />                  \n                )\n            }\n         \n        </div>\n        </>\n    )\n\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [estado, setEstado] = useState(\n        {\n            data:[],\n            loading: true\n        }\n    );\n\n    useEffect( () => {\n        \n        getGifs( category )\n            .then( (imgs) => {\n                \n                setEstado( {\n                    data: imgs,\n                    loading: false\n                })\n            });\n    \n        }, [category]);\n\n\n    return estado //{ data:[], loading: true }\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n//Functional Component FC\nconst GifExpertApp = ( { defaultCategories = [] } ) => {\n\n    const [categories, setCategories] = useState( defaultCategories );\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n            <ol>\n                {\n                    categories.map( category => \n                        ( \n                            <GifGrid \n                                key={category}\n                                category={category} \n                            /> \n                        )\n                    )\n                \n                }\n            </ol>\n        </>\n\n    )\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}