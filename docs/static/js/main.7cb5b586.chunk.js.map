{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catsExistentes","handleSubmit","type","value","onChange","target","handleValue","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","estado","setEstado","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAAW,SAAAC,GAAC,OAVD,SAACA,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAgB,SAAAS,GAAc,OAAMP,GAAN,mBAAqBO,OACnDN,EAAc,KAKIO,CAAaL,IAAnC,SACI,uBACIM,KAAK,OACLC,MAAQV,EACRW,SAAY,SAACR,GAAD,OAlBJ,SAACA,GACjBF,EAAeE,EAAES,OAAOF,OAiBGG,CAAYV,S,+BCzBlCW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACjC,MAAO,CACHF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QAVnB,kBAcZM,GAdY,4CAAH,sDCCPM,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOT,EAAW,EAAXA,IAElC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAGtB,ECHwB,SAAEA,GAE1B,MAA4BhB,mBACxB,CACIuB,KAAK,GACLY,SAAS,IAHjB,mBAAOC,EAAP,KAAeC,EAAf,KAqBA,OAdAC,qBAAW,WAEPvB,EAASC,GACJuB,MAAM,SAACC,GAEJH,EAAW,CACPd,KAAMiB,EACNL,SAAS,SAIlB,CAACnB,IAGDoB,EDpB0BK,CAAczB,GAAlCY,EAAb,EAAQL,KAAaY,EAArB,EAAqBA,QAGrB,OACI,qCACA,6BAAMnB,IAEJmB,GAAW,mBAAGJ,UAAU,qDAAb,wBACb,qBAAKA,UAAU,YAAf,SAGQH,EAAOH,KAAK,SAAAiB,GAAG,OACX,cAAC,EAAD,eAEKA,GADAA,EAAIhB,aEadiB,EA5BM,WAEjB,MAAoC3C,mBAAS,CAAC,oBAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OAEhB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCXrC6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7cb5b586.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleValue = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2 ) {\n            setCategories ( catsExistentes => [ inputValue, ...catsExistentes] );\n            setInputValue('');\n        }\n    }\n    \n    return (\n        <form onSubmit={ e => handleSubmit(e) }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange= { (e) => handleValue(e) }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=20&api_key=gioUW6f3fRdjFkMrr8HCDDS4J5egsE3A`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( ({ id, title, images }) => {\n        return {\n            id,\n            title,\n            url: images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n\n\n}\n","import React from 'react';\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n\n    // const [images, setImages] = useState([]);\n    const { data:images, loading } = useFetchGifs( category );\n\n   \n    return (\n        <>\n        <h3>{ category }</h3>\n\n        { loading && <p className=\"animate__animated animate__flash animate__infinite\">Loading...</p>}\n        <div className=\"card-grid\">\n            \n            {\n                images.map( img  => \n                    <GifGridItem \n                    key={img.id}\n                    { ...img } />                  \n                )\n            }\n         \n        </div>\n        </>\n    )\n\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [estado, setEstado] = useState(\n        {\n            data:[],\n            loading: true\n        }\n    );\n\n    useEffect( () => {\n        \n        getGifs( category )\n            .then( (imgs) => {\n                \n                setEstado( {\n                    data: imgs,\n                    loading: false\n                })\n            });\n    \n        }, [category]);\n\n\n    return estado //{ data:[], loading: true }\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n//Functional Component FC\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Legend of Zelda'])\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n            <ol>\n                {\n                    categories.map( category => \n                        ( \n                            <GifGrid \n                                key={category}\n                                category={category} \n                            /> \n                        )\n                    )\n                \n                }\n            </ol>\n        </>\n\n    )\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}